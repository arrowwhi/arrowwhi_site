{{template "base" .}}

{{define "main"}}
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        flex: 1;
        display: flex;
    }


    .chat_body {
        display: flex;
        flex: auto;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .active_early {
        display: flex;
        width: 100%;
        /*height: 80%;*/
        /*border: 2px solid #000; !* Толщина рамки и ее стиль *!*/
        /*border-radius: 10px; !* Радиус закругления углов *!*/
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 10px; /* Добавляем отступы вокруг содержимого */
        flex-direction: column;
        justify-content: space-between;
        height: 550px;
    }

    #early_href {
        /*width: 100%;*/
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 10px; /* Добавляем отступы вокруг содержимого */
    }

    .active_zone {
        display: flex;
        width: 100%;
        /*height: 80%;*/
        /*border: 2px solid #000; !* Толщина рамки и ее стиль *!*/
        /*border-radius: 10px; !* Радиус закругления углов *!*/
        /*box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);*/
        padding: 10px; /* Добавляем отступы вокруг содержимого */
        flex-direction: column;
        /*justify-content: space-between;*/
        height: 500px;
    }

    .input_container {
        display: flex;
        align-items: center;
    }

    .sidebar {
        background-color: #f2f2f2;
        height:80vh;
        width: 200px;
        /*padding: 0px;*/
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        justify-content: normal;
    }

    .message_list {
        display: flex;
        /*overflow: auto;*/
        flex-direction: column;
        align-items: flex-end;
        height: 100vh;
        justify-content: flex-end;
        overflow-y: auto;
    }

    .input_zone {
        /*display: flex;*/
        width: 100%;

    }
    .user_lnk {
        margin: 5px 0;
        padding: 5px;
        border-radius: 5px;
        background-color: #4CAF50;
        color: white;
    }
    .chat_input {
        width: 90%;
        margin-right: 10px;
    }

    .chat_button {
        width: 10%;
    }

    .plain_message {
        width: 80%; /* Примерная ширина, можно изменить */
        margin: 0 auto; /* Расположение по центру */
        color: #626262; /* Серый цвет фона */
        padding: 20px; /* Отступы внутри дива */
        font-family: Arial, sans-serif; /* Шрифт */
        font-size: 30px; /* Размер шрифта */
        text-align: center;
    }

    .msg_class {
        border: 0 solid #000;
    }

</style>

<style>
    .table {
        width: 100%;
        border-collapse: collapse;
    }

    .table th,
    .table td {
        padding: 5px;
    }

    .table th:first-child,
    .table td:first-child,
    .table th:nth-child(2),
    .table td:nth-child(2) {
        text-align: left;
    }

    .table th:last-child,
    .table td:last-child {
        text-align: right;
    }

    .table th:first-child,
    .table th:last-child {
        width: 100px;
    }

    .table th:nth-child(3),
    .table td:nth-child(3) {
        width: 70px;
    }

    .invisible {
        /*display: none;*/
        height: 0;
    }


</style>

<div class = "chat_body">
    <div class="d-flex flex-column align-items-stretch flex-shrink-0 bg-body-tertiary" style="width: 350px;">
        <form class="d-flex mt-3 mt-lg-0" role="search">
            <input id="loginsSearch" class="form-control me-2" type="search" placeholder="Search" aria-label="Search" data-toggle="dropdown">
        </form>
        <div id="messagesList" class="list-group list-group-flush border-bottom scrollarea">
        {{range .logins}}
        <a href="#" class="list-group-item list-group-item-action py-3 lh-sm login_click">
            <div class="d-flex w-100 align-items-center justify-content-between">
                <strong class="mb-1">{{.user}}</strong>
                <small class="text-body-secondary">{{.create_date}}</small>
            </div>
            <div class="col-10 mb-1 small">{{if (eq .rotation "from")}}Вы:{{end}}{{.message}}</div>
        </a>
        {{end}}
        </div>
        <div id="loginsList" class="list-group list-group-flush border-bottom scrollarea invisible">
        </div>
    </div>
    <div class="active_early">
        <div id="early_href_div" class="invisible"><a href="#" id="early_href">Загрузить ранние...</a></div>
        <div class="active_zone">
            <div class="message_list">
                <table class="table" id="message_list">
                    <tr>
                        <th> </th>
                        <td>Выберите пользователя для начала чата</td>
                        <td> </td>
                    </tr>
                </table>
            </div>
            <div class="input_zone">
                <div class="input_container">
                    <input class="form-control chat_input" id="chat_input" type="text" placeholder="Пишите тут..." onkeydown="checkEnter(event)">
                    <input id="send" class="btn btn-light chat_button" type="submit" value="Отправить" onclick="press_send(event)" />
                </div>
            </div>
        </div>
    </div>
</div>
<script src="js/chat.js"></script>
<script>
    // функция создания вебсокета
    document.addEventListener('DOMContentLoaded', function() {
        if (ws) {
            return
        }
        ws = new WebSocket("{{.chatId}}");
        ws.onopen = function() {
            console.log("OPEN")
        }
        ws.onclose = function() {
            console.log("CLOSE");
            ws = null;
        }
        ws.onmessage = function(evt) {
            const struct = JSON.parse(evt.data);
            console.log(evt.data)
            if (struct.user_from === single_message.recipient) {
                print(`${struct.user_from}:`, " " + struct.message, new Date());
            } else {
                console.log(struct.from, struct.message)
            }
            const elem = getFromCurrentLogin(struct.user_from)
            if (elem) {
                elem.remove()
            }
            const messageData = {
                user: struct.user_from, // struct.user_from,
                create_date: dateTimeValidation(new Date()),
                message: struct.message
            };
            const newElem = createLoginMessage(messageData)
            q = document.getElementById("messagesList")
            q.prepend(newElem)


        }
        ws.onerror = function(evt) {
            console.log("ERROR: " + evt.data);
        }
    });
</script>

{{end}}