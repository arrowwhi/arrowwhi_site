{{template "base" .}}

{{define "main"}}
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
    }

    .chat_body {
        display: flex;

    }

    .sidebar {
        background-color: #f2f2f2;
        height: 100vh;
        width: 150px;
        padding: 10px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        justify-content: normal;
    }

    .message_list {
        display: flex;
        overflow: auto;
        flex-direction: column;
        align-items: flex-start;
        height: 300px;
    }

    .input_zone {
        display: flex;

    }

    .login_click {
        color: #cccccc;
    }

    .user_lnk {
        margin: 5px 0;
        padding: 5px;
        border-radius: 5px;
        background-color: #4CAF50;
        color: white;
    }
</style>

<div class = "chat_body">
    <div class="sidebar">
        {{range .logins}}
        <div class="user_lnk">
            <a href="#" class="login_click">{{.}}</a>
        </div>
        {{end}}
    </div>
    <div class="active_zone">
        <div id="message_list" class="message_list">

        </div>
        <div class="input_zone">
            <label for="chat_input">
                <input type="text" class="chat_input" id="chat_input" placeholder="вводить текст сюда" onkeydown="checkEnter(event)" />
                <input id="send" type="submit" onclick="press_send(event)" />
            </label>
        </div>
    </div>
</div>

<script>
    const input = document.getElementById("chat_input");
    const output = document.getElementById("message_list");
    let ws;
    let single_message = {
        "m_type": "message",
        "message": "",
        "recipient": "",
    }

    // Функция для создания структуры тегов
    function createMessage(author, messageText) {
        const messageDiv = document.createElement("div");
        messageDiv.classList.add("message");

        const strongElement = document.createElement("strong");
        const authorLink = document.createElement("a");
        authorLink.href = "#user";
        authorLink.textContent = author;
        strongElement.appendChild(authorLink);

        const spanElement = document.createElement("span");
        spanElement.textContent = messageText;

        messageDiv.appendChild(strongElement);
        messageDiv.appendChild(spanElement);

        return messageDiv;
    }

    const print = function (author, message) {
        const d = createMessage(author, message)
        output.appendChild(d);
        output.scroll(0, output.scrollHeight);
    };

    document.addEventListener('DOMContentLoaded', function(evt) {
        if (ws) {
            return false;
        }
        ws = new WebSocket("{{.chatId}}");
        ws.onopen = function(evt) {
            console.log("OPEN")
        }
        ws.onclose = function(evt) {
            console.log("CLOSE");
            ws = null;
        }
        ws.onmessage = function(evt) {
            const struct = JSON.parse(evt.data);
            console.log(evt.data)
            if (struct.from === single_message.recipient) {
                print(`${struct.from}:`, " " + struct.message);
            } else {
                console.log(struct.from, struct.message)
            }
        }
        ws.onerror = function(evt) {
            console.log("ERROR: " + evt.data);
        }
        return false;
    });

    function checkEnter(evt) {
        if (event.key === "Enter") {
            event.preventDefault();
            press_send(evt)
        }
    }

    function press_send(evt) {
        if (!ws) {
            return false;
        }
        single_message.message = input.value;
        console.log("SEND: " + JSON.stringify(single_message));
        ws.send(JSON.stringify(single_message));
        return false;
    }


    function handleLoginClick(event, clickedElement) {
        event.preventDefault();
        const link = event.target;
        single_message.recipient = link.textContent;
        const allLinks = document.querySelectorAll('.user_lnk');
        for (let i = 0; i < allLinks.length; i++) {
            allLinks[i].style.backgroundColor = "#4CAF50";
        }

        const divElement = clickedElement.parentNode;
        divElement.style.backgroundColor = 'blue';
    }

    const links = document.querySelectorAll(".login_click");
    links.forEach((link) => {
        link.addEventListener("click", function(event) {
            event.preventDefault();
            handleLoginClick(event, this);
        });
    });

</script>


{{end}}