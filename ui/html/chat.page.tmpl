{{template "base" .}}

{{define "main"}}
<style>

    .profile-picture-container {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        overflow: hidden;
        position: relative;
    }

    .chat_body {
        display: flex;
        flex: auto;
        flex-direction: row;
        height: 100%;
    }

    .active_early {
        width: 100%;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 10px; /* Добавляем отступы вокруг содержимого */
        flex-direction: column;
        justify-content: space-between;
    }

    .active_zone {
        display: flex;
        width: 100%;
        padding: 10px; /* Добавляем отступы вокруг содержимого */
        flex-direction: column;
    }

    .input_container {
        display: flex;
        align-items: center;
    }

    .chat_input {
        width: 90%;
        margin-right: 10px;
    }

    .chat_button {
        width: 10%;
    }


    #message_list {
        overflow-x: auto;
    }

    #messagesList.scrollarea {
        max-height: 84vh;
        overflow-y: auto;
    }

</style>

<style>
    .table {
        width: 100%;
        border-collapse: collapse;
    }

    .table th,
    .table td {
        padding: 5px;
    }

    .table tr.unread {
        background-color: #d35454;
    }

    .table th:first-child,
    .table td:first-child,
    .table th:nth-child(2),
    .table td:nth-child(2) {
        text-align: left;
    }

    .table th:last-child,
    .table td:last-child {
        text-align: right;
    }

    .table th:first-child,
    .table th:last-child {
        width: 100px;
    }

    .table th:nth-child(3),
    .table td:nth-child(3) {
        width: 70px;
    }

    .invisible {
        height: 0;
    }

</style>

<audio id="sound">
    <source src="/sounds/message_alarm.mp3" type="audio/mpeg">
    Your browser does not support the audio element.
</audio>


<div class = "container-fluid  chat_body shadow p-1">
    <div id="lgns" class="col-12 col-md-3 d-lg-block" >
        <form class="d-flex mt-3 mt-lg-0" role="search">
            <input id="loginsSearch" class="form-control me-2" type="search" placeholder="Search" aria-label="Search" data-toggle="dropdown">
        </form>
        <div id="messagesList" class="list-group list-group-flush border-bottom scrollarea">
        {{range .logins}}
        <a href="#" class="list-group-item list-group-item-action py-3 lh-sm login_click col-12 col-md-6 ">

            <div class="d-flex w-100 align-items-center justify-content-between position-relative">
                <strong class="mb-1">{{.user}}</strong>
                <span class="top-100 start-50 translate-middle badge rounded-pill bg-danger {{if eq .unread 0}}d-none{{end}}">
    {{.unread}}
{{/*    <span class="visually-hidden">непрочитанные сообщения</span>*/}}
  </span>
                <small class="text-body-secondary">{{.create_date}}</small>
            </div>
            <div class="col-10 mb-1 small text-start">{{if (eq .rotation "from")}}<strong>Вы: </strong>{{end}}{{.message}}</div>
        </a>
        {{end}}
        </div>
        <div id="loginsList" class="list-group list-group-flush border-bottom scrollarea invisible">
        </div>
    </div>
    <div class="active_early d-none d-sm-block" id="message_zero">
        <div class="d-flex align-items-center justify-content-between px-2 py-1 border-bottom border-2 ">
            <button id="login_button" class="btn btn-secondary position-relative d-lg-none">Сообщения
            </button>
            <span id="MessageListProfileName" class="text-center flex-grow-1">Логин</span>
            <img src="/profiles/default.jpg" id="MessageListProfilePhoto" alt="Логотип" class="img-fluid border profile-picture-container" style="max-width: 50px;">
        </div>
        <div class="active_zone h-75">
        <div id="early_href_div" class="invisible"><a href="#" id="early_href">Загрузить ранние...</a></div>
            <div class="message_list table-responsive d-flex flex-column h-75">
                <table class="table" id="message_list">
                    <tr>
                        <th> </th>
                        <td>Выберите пользователя для начала чата</td>
                        <td> </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="input_container">
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    +
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#">Фото</a></li>
                    <li><a class="dropdown-item" href="#">Видео</a></li>
                    <li><a class="dropdown-item" href="#">Файл</a></li>
                </ul>
            </div>
            <input class="form-control chat_input " id="chat_input" type="text" placeholder="Пишите тут..." onkeydown="checkEnter(event)">
            <input id="send" class="btn btn-light chat_button" type="submit" value="Отправить" onclick="press_send(event)" />
        </div>
    </div>
</div>
<script src="js/chat.js"></script>
<script>
    // функция создания вебсокета
    document.addEventListener('DOMContentLoaded', function() {
        if (ws) {
            return
        }
        ws = new WebSocket("{{.chatId}}");
        ws.onopen = function() {
            console.log("OPEN")
        }
        ws.onclose = function() {
            console.log("CLOSE");
            ws = null;
            setTimeout(function() {
                document.location.reload();
            }, 2000);
        }
        ws.onmessage = function(evt) {
            const struct = JSON.parse(evt.data);
            console.log(evt.data)

            if (struct.m_type === "take_id_from_local") {
                if (struct.local_id in pendingResponses) {
                    const d = pendingResponses[struct.local_id]
                    d.setAttribute('data-message-id', struct.id);
                    delete pendingResponses[struct.local_id];
                }
            } else if (struct.m_type === "make_read") {
                MarkAsRead(struct.id)
            } else {
                const sound = document.getElementById("sound");
                sound.play()
                if (struct.user_from === single_message.user_to) {
                    print(struct);
                    ws.send(JSON.stringify({
                        m_type: "read_message",
                        ids: [struct.id]
                    }));
                } else {
                    console.log(struct.from, struct.message)
                }
                GetNewMessageOnLoginList(struct)
            }
        }
        ws.onerror = function(evt) {
            console.log("ERROR: " + evt.data);
        }

    });
</script>
{{end}}